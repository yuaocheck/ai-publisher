name: Deploy AI Publisher to Cloudflare Workers

on:
  push:
    branches:
      - main
      - master
  pull_request:
    branches:
      - main
      - master
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'production'
        type: choice
        options:
        - production
        - staging

jobs:
  test:
    runs-on: ubuntu-latest
    name: Test
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run linting
        run: npm run lint

      - name: Run type checking
        run: npm run type-check

      - name: Run tests
        run: npm test

  deploy-staging:
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    needs: test
    name: Deploy to Staging
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Deploy to Cloudflare Workers (Staging)
        uses: cloudflare/wrangler-action@v3
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          command: deploy --env staging
          workingDirectory: '.'

  deploy-production:
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    runs-on: ubuntu-latest
    needs: test
    name: Deploy to Production
    environment: production
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Deploy to Cloudflare Workers (Production)
        uses: cloudflare/wrangler-action@v3
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          command: deploy --env production
          workingDirectory: '.'
          secrets: |
            GEMINI_API_KEY
            TWITTER_CLIENT_ID
            TWITTER_CLIENT_SECRET
            FACEBOOK_APP_ID
            FACEBOOK_APP_SECRET
            INSTAGRAM_CLIENT_ID
            INSTAGRAM_CLIENT_SECRET
            LINKEDIN_CLIENT_ID
            LINKEDIN_CLIENT_SECRET
            YOUTUBE_CLIENT_ID
            YOUTUBE_CLIENT_SECRET
            TIKTOK_CLIENT_KEY
            TIKTOK_CLIENT_SECRET
            OPENAI_API_KEY
            SUPABASE_URL
            SUPABASE_ANON_KEY
            SUPABASE_SERVICE_ROLE_KEY

      - name: Create GitHub Release
        if: success()
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ github.run_number }}
          release_name: AI Publisher v${{ github.run_number }} - publisher.ai
          body: |
            üöÄ AI Publisher deployed to publisher.ai with Cloudflare MCP integration

            **üåü Features in this release:**
            - ‚úÖ 14 Cloudflare MCP Servers integrated
            - ‚úÖ Global edge deployment (200+ data centers)
            - ‚úÖ Multi-platform social media publishing
            - ‚úÖ AI content generation (text, images, videos)
            - ‚úÖ Enterprise-grade security and performance

            **üîß Cloudflare MCP Servers:**
            - Documentation Server - Cloudflare docs search
            - Workers Bindings Server - Storage, AI, compute primitives
            - Workers Builds Server - Build insights and management
            - Observability Server - Logs and analytics debugging
            - Radar Server - Global Internet traffic insights
            - Container Server - Sandbox development environment
            - Browser Rendering Server - Web page rendering and screenshots
            - Logpush Server - Log job health summaries
            - AI Gateway Server - AI logs and prompt analytics
            - AutoRAG Server - Document search and RAG analytics
            - Audit Logs Server - Security audit logs and reports
            - DNS Analytics Server - DNS performance optimization
            - Digital Experience Monitoring - App performance insights
            - Cloudflare One CASB Server - SaaS security misconfigurations
            - GraphQL Server - Analytics via Cloudflare GraphQL API

            **üìã Changes in this release:**
            ${{ github.event.head_commit.message }}

            **üöÄ Deployment Details:**
            - Environment: Production
            - Domain: publisher.ai
            - Commit: ${{ github.sha }}
            - Deployed at: ${{ github.event.head_commit.timestamp }}

            **üåê Access Links:**
            - [Live Site](https://publisher.ai)
            - [Main App](https://publisher.ai/demo/start.html)
            - [MCP Integration](https://publisher.ai/demo/mcp-integration.html)
            - [API Health](https://publisher.ai/api/health)
            - [MCP Health](https://publisher.ai/api/mcp/health)
            - [Commit](https://github.com/${{ github.repository }}/commit/${{ github.sha }})
          draft: false
          prerelease: false

  notify:
    if: always()
    runs-on: ubuntu-latest
    needs: [test, deploy-production]
    name: Notify Deployment Status
    steps:
      - name: Notify Success
        if: needs.deploy-production.result == 'success'
        run: |
          echo "üéâ AI Publisher deployment to publisher.ai successful!"
          echo "üåê Main site: https://publisher.ai"
          echo "üöÄ App: https://publisher.ai/demo/start.html"
          echo "üîß MCP Integration: https://publisher.ai/demo/mcp-integration.html"
          echo "üìä API Health: https://publisher.ai/api/health"
          echo "‚ö° MCP Health: https://publisher.ai/api/mcp/health"
          echo "üåç Global deployment with 14 Cloudflare MCP servers integrated!"

      - name: Notify Failure
        if: needs.deploy-production.result == 'failure'
        run: |
          echo "‚ùå AI Publisher deployment to publisher.ai failed!"
          echo "Please check the logs for more information."
          echo "Common issues:"
          echo "- Check GitHub Secrets are set correctly"
          echo "- Verify Cloudflare API token permissions"
          echo "- Ensure Account ID is correct"
